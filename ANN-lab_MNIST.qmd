# Lab: Implementing ANN with MINIST dataset
---

ANN에서 필요한 활성화함수, 손실함수, 미니배치 및 경사하강법(기울기)에 학습내용을 바탕으로 신경망을 실제로 구현해보도록 하겠습니다. 참고로 미니배치를 이용하여 확률적으로 데이터를 무작위로 추출한 경우를 **확률적 경사하강법**(SGD: stochastic gradient descent)라고 합니다.

구현할 학습알고리즘은 MNIST 데이터 셋을 활용하여 손글씨 숫자를 인식하는 ANN으로 먼저 ANN 클래스를 구현하고 이후 미니배치를 통한 학습 알고리즘을 구현하도록 하겠습니다.^[TwoLayerNet은 스탠퍼드의 CS231n  수업에서 제공한 코드를 참고]

## STEP1: Two Layer Net

우리는 지금까지 학습한 내용에 기초하여 아래와 같이 순전파(forward propagation) 과정을 **Two Layer Net**이라는 클래스로 구현해 보겠습니다. 

``` {python}
#| eval: False
import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
from common.functions import *
from common.gradient import numerical_gradient


class TwoLayerNet:

    def __init__(self, input_size, hidden_size, output_size, weight_init_std=0.01): # <1>
        # 가중치 초기화
        self.params = {}
        self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)
        self.params['b1'] = np.zeros(hidden_size)
        self.params['W2'] = weight_init_std * np.random.randn(hidden_size, output_size)
        self.params['b2'] = np.zeros(output_size)

    def predict(self, x): # <2>
        W1, W2 = self.params['W1'], self.params['W2']
        b1, b2 = self.params['b1'], self.params['b2']
    
        a1 = np.dot(x, W1) + b1
        z1 = sigmoid(a1)
        a2 = np.dot(z1, W2) + b2
        y = softmax(a2)
        
        return y
        
    # x : 입력 데이터, t : 정답 레이블
    def loss(self, x, t): # <3>
        y = self.predict(x)
        
        return cross_entropy_error(y, t)
    
    def accuracy(self, x, t): # <4>
        y = self.predict(x)
        y = np.argmax(y, axis=1)
        t = np.argmax(t, axis=1)
        
        accuracy = np.sum(y == t) / float(x.shape[0])
        return accuracy
        
    # x : 입력 데이터, t : 정답 레이블
    def numerical_gradient(self, x, t): # <5>
        loss_W = lambda W: self.loss(x, t)
        
        grads = {}
        grads['W1'] = numerical_gradient(loss_W, self.params['W1'])
        grads['b1'] = numerical_gradient(loss_W, self.params['b1'])
        grads['W2'] = numerical_gradient(loss_W, self.params['W2'])
        grads['b2'] = numerical_gradient(loss_W, self.params['b2'])
        
        return grads
        
    def gradient(self, x, t): # <6>
        W1, W2 = self.params['W1'], self.params['W2']
        b1, b2 = self.params['b1'], self.params['b2']
        grads = {}
        
        batch_num = x.shape[0]
        
        # forward
        a1 = np.dot(x, W1) + b1
        z1 = sigmoid(a1)
        a2 = np.dot(z1, W2) + b2
        y = softmax(a2)
        
        # backward
        dy = (y - t) / batch_num
        grads['W2'] = np.dot(z1.T, dy)
        grads['b2'] = np.sum(dy, axis=0)
        
        da1 = np.dot(dy, W2.T)
        dz1 = sigmoid_grad(a1) * da1
        grads['W1'] = np.dot(x.T, dz1)
        grads['b1'] = np.sum(dz1, axis=0)

        return grads
```
1. `__init__` 클래스의 초기화 수행 (입력층, 은닉층, 출력층 각각의 뉴런수 지정)
2. `predict` 추론을 수행 (x 이미지 데이터)
3. `loss` 손실함수 값 산출 (x 이미지 데이터, t 정답레이블)
4. `accuracy` 신경망의 정확도 산출
5. `numerical_gradient` 매개변수(가중치)의 기울기 산출
6. `gradient` 매개변수(가중치)의 기울기 산출(오차 역전파과정은 다음장에서 설명)

위의 클래스에서 `gradient` 메서드의 경우 순전파와 역전파를 모두 사용하고, 순전파시 활성화 함수로 `sigmoid`를 출력값의 활성화 함수로 분류 문제해결을 위해 `softmax`를 사용하였습니다.(제사한 사항은 활성화 함수를 참고 @sec-annFor) 

추가적으로 우리가 사용할 데이터의 형상에 주의하여 클래스의 초기화를 수행해야 합니다. **MNIST** 데이터 셋의 개별 입력값은 $28 \times 28$ 픽셀을 Flatten하게하여 784개의 입력값의 형상을 설정해야 합니다.

또한, 우리가 수행하는 분류문제에서 출력값은 분류하고자 하는 카테고리의 갯수 여기서 **0~9**까지 10개의 숫자를 분류해야 함을 고려하여 출력값의 형상은 10개로 설정해야 합니다.

## STEP2: Mini-Batch

모든 데이터를 갖고 학습하는 것은 효율적이지 않다고 하였습니다. 따라서, 무작위로 훈련 데이터 중 일부를 추출하여 훈련을 진행하는 미니배치 방법을 통하여 훈련의 효율성을 높일 수 있습니다.

미니배치를 활용하여 확률적 경사하강법을 구현하면 아래와 같습니다.

``` {python}
#| eval: False
import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
import matplotlib.pyplot as plt
from dataset.mnist import load_mnist

# 데이터 읽기
(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)

network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)

# 하이퍼파라미터
iters_num = 10000  # 반복 횟수를 적절히 설정한다.
train_size = x_train.shape[0]
batch_size = 100   # 미니배치 크기
learning_rate = 0.1

train_loss_list = []

for i in range(iters_num):
    # 미니배치 획득
    batch_mask = np.random.choice(train_size, batch_size)
    x_batch = x_train[batch_mask]
    t_batch = t_train[batch_mask]
    
    # 기울기 계산
    #grad = network.numerical_gradient(x_batch, t_batch)
    grad = network.gradient(x_batch, t_batch)
    
    # 매개변수 갱신
    for key in ('W1', 'b1', 'W2', 'b2'):
        network.params[key] -= learning_rate * grad[key]
    
    # 학습 경과 기록
    loss = network.loss(x_batch, t_batch)
    train_loss_list.append(loss)
```

## STEP3: Evaluating with test data

이제 우리가 구현한 클래스의 성능을 평가해 보도록 하겠습니다. 훈련데이터를 미니배치로 나누어 훈련을 진행하였는데 과연 다른 새로운 데이터셋에서도 동일한 성능을 발휘할지 알아야 합니다.

만약, 훈련 데이터에만 적응한 ANN이라면 새로운 데이터에서는 적절한 성능을 발휘하지 못할 가능성이 있기 때문입니다. 이를 **오버피팅**(overfitting)^[오버피팅은 훈련데이터에 대한 정확도는 높으나 신규 데이터에는 적절한 성능을 발휘하지 못하는 문제로 이러한 문제를 해결하기 위하여 조기종료(early stopping), 가중치 감소, 드롭아웃(drop-out)등의 기법이 사용됩니다.]이라 합니다.

``` {python}
#| eval: False
import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
import matplotlib.pyplot as plt
from dataset.mnist import load_mnist

# 데이터 읽기
(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)

network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)

# 하이퍼파라미터
iters_num = 10000  # 반복 횟수를 적절히 설정한다.
train_size = x_train.shape[0]
batch_size = 100   # 미니배치 크기
learning_rate = 0.1

train_loss_list = []
train_acc_list = [] # <1>
test_acc_list = [] # <2>

iter_per_epoch = max(train_size / batch_size, 1) # <3>

for i in range(iters_num):
    # 미니배치 획득
    batch_mask = np.random.choice(train_size, batch_size)
    x_batch = x_train[batch_mask]
    t_batch = t_train[batch_mask]
    
    # 기울기 계산
    #grad = network.numerical_gradient(x_batch, t_batch)
    grad = network.gradient(x_batch, t_batch)
    
    # 매개변수 갱신
    for key in ('W1', 'b1', 'W2', 'b2'):
        network.params[key] -= learning_rate * grad[key]
    
    # 학습 경과 기록
    loss = network.loss(x_batch, t_batch)
    train_loss_list.append(loss)
    
    # 정확도 계산
    if i % iter_per_epoch == 0: # <4>
        train_acc = network.accuracy(x_train, t_train)
        test_acc = network.accuracy(x_test, t_test)
        train_acc_list.append(train_acc)
        test_acc_list.append(test_acc)
        print("train acc, test acc | " + str(train_acc) + ", " + str(test_acc))

# 그래프 그리기
markers = {'train': 'o', 'test': 's'}
x = np.arange(len(train_acc_list))
plt.plot(x, train_acc_list, label='train acc')
plt.plot(x, test_acc_list, label='test acc', linestyle='--')
plt.xlabel("epochs")
plt.ylabel("accuracy")
plt.ylim(0, 1.0)
plt.legend(loc='lower right')
plt.show()
```
1. `train_acc_list` 학습 데이터에 대한 정확도를 저장하는 튜플
2. `test_acc_list` 검증 데이터에 대한 정확도를 저장하는 튜플
3. `iter_per_epoch` 1 epoch당 반복하는 횟수
4. `if i % iter_per_epoch == 0:` 1 epoch당 정확도 계산

![Accuracy trends for training and test data](image/annTLN.png){#fig-annTLN}

위의 그림에서 보듯이 훈련 데이터(실선)와 검증 데이터(점선)의 정확도가 epoch인 진행될 수록 같은 수준으로 좋아지고 있습니다. 이는 오버피팅없이 적절히 학습이 이루어 졌다고 평가할 수 있습니다.



