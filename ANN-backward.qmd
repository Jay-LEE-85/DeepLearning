# Backward Propagation

지금까지 순전파를 거쳐 산출한 손실함수값을 수치미분을 이용하여 기울기만큼 매개변수를 업데이트 하는 학습과정을 살펴보았습니다. 구현은 단순할 수 있으나, 계산속도는 그리 빠르지 않습니다. 여기서 등장하는 것이 **오차역전파**(backpropagation)입니다.

오차역전파를 이해하기 위하여는 우리는 2가지를 먼저 이해할 필요가 있다고 생각합니다. 하나는 미분에서의 **chain-rule**이고 다른 하나는 피보나치 수열에 기반한 **Dynamic Programming**입니다,

## Pre-requisite: Chain-rule and Dynamic Programming

오차역전파는 기본적으로 손실함수 값에서 입력값까지의 매개변수를 역으로 조정하는 과정으로 순방향과 반대방향으로 국소적인 미분값을 곱하며 가중치를 조정하는 절차로 이해할 수 있습니다.

### Chain-rule

**반대방향으로 국소적인 미분값을 곱한다**는 것은 어떠한 의미를 갖고 있을까요? 그리고 이러한 연산의 기반이 되는 개념이 무엇일까요? 이물음에 대한 답변이 바로 **연쇄법칙**입니다. 연쇄법칙에 관한 자세한 설명은 아래 **3Blue1Brown**^[3Blue1Brown은 많은 수학적인 문제를 도식화하여 아주 직관적으로 설명하고 있어 매우 유용합니다.] 영상을 참고하기 바랍니다.

{{< video https://www.youtube.com/embed/tIeHLnjs5U8?rel=0 >}}

### Dynamic Programming

연쇄법칙을 정확히 이해하셨다면 지속적으로 미분값이 중복으로 계산해야 함을 확인할 수 있습니다. 그러나 이미 계산된 미분값을 따로 저장하였다가 불러오기만 한다면 연산이 얼마나 쉬워질까요? 쉬워진다기보다 간단해지고 컴퓨터의 연산의 수를 줄일 수 있지 않을까요?

바로 이러한 배경에서 연쇄법칙을 빠르게 수행하기 위하여 고려되는 방법이 **동적계획법** 입니다. 이는 피보나치 수열의 계산에 있어서 재귀적으로 반복계산되는 노드를 저장하여 두었다가 다른 재귀식에서는 그 값을 호출하여 사용하도록 하여 연산의 수를 줄이고 종국적으로는 알고리즘의 성능을 개선해줄수 있을 것입니다.

동적계획법에 대한 자세한 설명은 아래 영상을 참고하시기 바랍니다.

{{< video https://www.youtube.com/embed/oBt53YbR9Kk?list=PLQCbmnrn5eI9vrt_T4o-KCn-5DlESFDBM >}}


## backpropagation

