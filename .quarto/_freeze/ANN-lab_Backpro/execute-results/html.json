{
  "hash": "6637b6f36f355bd0005cd8cf82c4b689",
  "result": {
    "engine": "jupyter",
    "markdown": "# Lab: Implementing Backpropagation to ANN \n\n---\n\n지금까지 살펴본 내용을 종합하여 계층들을 조합한 신경망을 구축해 보도록 하겠습니다.  구체적인 구현에 앞서 전체적인 이해를 위해 전체과정을 다시 살펴볼 필요가 있습니다.\n\n-   **Pre requisite**\n    + 신경망에는 적응 가능한 가중치와 편향이 있고, 이 가중치와 편향을 훈련 데이터에 적응하도록 조정하는 과정을 **학습**이라 한다.\n-   **1단계 - 미니배치**\n    + 훈련 데이터 중 일부를 무작위로 추출하고, 이러한 미니배치를 활용하여 미니배치의 손실함수 값을 줄이도록 하는 것을 목표로 한다.\n-   **2단계 - 기울기 산출**\n    + 미니배치의 손실함수 값을 줄이기 위해 각 가중치 매개변수의 기울기루 구하고, 기울기는 손실함수의 값을 가장작게하는 방향으로 제시한다.\n-   **3단계 - 매개변수 갱신**\n    + 가중치 매개변수를 기울기의 반대방향(책에는 기울기 방향으로 되어 있는데?)으로 아주 조금 갱신한다.\n-   **4단계 - 반복(Iteration)**\n    + 1~3단계를 반복합니다.\n\n오차 역전파는 2단계인 기울기 산출에 해당하고 기울기는 수치미분을 활용함을 다시 떠올려보고, 이를 효율적으로 수행하기 위하여 미니배치를 활용한다는 것까지 생각하며 다음의 구현사례를 살펴보도록 합시다.\n\n## STEP1: Two Layer Net\n\n지금까지 학습한 내용을 바탕으로 기존 **Two Layer Net**을 새롭게 구현해 보겠습니다. 2층 신경망의 가중치 초기화 및 계층을 생성하도록 합니다.\n\n이후 이 계층들을 활용하여 순전파^[순전파는 hidden layers를 대상으로 하는 `predict`와 output layer를 대상으로 하는 `loss` 메서드로 구분]를 우선 실행합니다. 이후 순전파시의 손실함수값을 받아 역전파를 진행합니다.\n\n::: {#866cd20f .cell execution_count=1}\n``` {.python .cell-code}\nimport sys, os\nsys.path.append(os.pardir)\nimport numpy as np\n\nfrom common.layers import *\nfrom common.gradient import numerical_gradient\nfrom collections import OrderedDict\n\nclass TwoLayerNet:\n\n  def __init__(self, input_size, hidden_size, output_size, weight_init_std = 0.01):\n    # 가중치 초기화\n    self.params = {}\n    self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)\n    self.params['b1'] = np.zeros(hidden_size)\n    self.params['W2'] = weight_init_std * np.random.randn(hidden_size, output_size) \n    self.params['b2'] = np.zeros(output_size)\n    # 계층 생성\n    self.layers = OrderedDict() # <1>\n    self.layers['Affine1'] = Affine(self.params['W1'], self.params['b1'])\n    self.layers['Relu1'] = Relu()\n    self.layers['Affine2'] = Affine(self.params['W2'], self.params['b2'])\n    self.lastLayer = SoftmaxWithLoss()\n\n  def predict(self, x):\n    for layer in self.layers.values():\n        x = layer.forward(x) # <2>\n    return x\n\n  # x :입력 데이터, t : 정답 레이블\n  def loss(self, x, t):\n    y = self.predict(x)\n    return self.lastLayer.forward(y, t) # <2>\n\n  def accuracy(self, x, t):\n    y = self.predict(x)\n    y = np.argmax(y, axis=1)\n    if t.ndim != 1: t = np.argmax(t, axis=1)\n    accuracy = np.sum(y == t) / float(x.shape[0])\n    return accuracy\n\n  # x :입력 데이터, t : 정답 레이블\n  def numerical_gradient(self, x, t): # <3>\n    loss_W = lambda W: self.loss(x, t)\n    \n    grads = {}\n    grads['W1'] = numerical_gradient(loss_W, self.params['W1'])\n    grads['b1'] = numerical_gradient(loss_W, self.params['b1'])\n    grads['W2'] = numerical_gradient(loss_W, self.params['W2'])\n    grads['b2'] = numerical_gradient(loss_W, self.params['b2'])\n    return grads\n\n  def gradient(self, x, t): # <3>\n    # 순전파\n    self.loss(x, t)\n\n    # 역전파\n    dout = 1\n    dout = self.lastLayer.backward(dout) # <4>\n    layers = list(self.layers.values())\n    layers.reverse() # <5>\n    for layer in layers:\n      dout = layer.backward(dout) # <4>\n\n    # 결과저장\n    grads = {}\n    grads['W1'] = self.layers['Affine1'].dW\n    grads['b1'] = self.layers['Affine1'].db\n    grads['W2'] = self.layers['Affine2'].dW\n    grads['b2'] = self.layers['Affine2'].db\n\n    return grads\n```\n:::\n\n\n1. `OrderedDict`의 경우 순서가 딕셔너리라 순전파 때 추가한 순서대로 연산\n2. `forward`는 `Affine` 및 `Relu`클래스에 존재하는 순전파 메서드\n3. `numerical_gradient`은 시험용 수치미분 메서드, `gradient`는 학습용 해석미분 메서드\n4. `backward`는 `Affine` 및 `Relu`클래스에 존재하는 역전파 메서드\n5. `reverse`로 `layers`의 순서를 뒤집어 연산이 역으로 진행되게 하는 메서드\n\n## STEP2: Gradient Check\n\n오차역전파 이전에 가중치 매개변수를 업데이트하기 위하여 기울기가 필요하다고 하였습니다. 이러한 기울기는 수치미분을 써서 구하는 방법과 핵석적으로 수식을 풀어 구하는 방법이 존재합을 확인하였습니다. \n\n후자의 경우가 매개변수가 많아도 효율적으로 계산할 수 있음을 확인한 만큼 오차역전파를 해석적인 방법을 활용하여 구현하겠습니다.^[수치미분은 구현이 쉬워 실수를 줄이고 정확한 값을 산출할 수 있습니다. 다만, 효율적이지 않은 문제가 있습니다. 따라서, 수치미분은 해석적 방법으로 구한 기울기의 값을 시험하기 위한 도구로 활용시 이점이 있습니다.]\n\n::: {#80c384e8 .cell execution_count=2}\n``` {.python .cell-code}\n# coding: utf-8\nimport sys, os\nsys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정\nimport numpy as np\nfrom dataset.mnist import load_mnist\n# from two_layer_net import TwoLayerNet\n\n# 데이터 읽기\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n\nnetwork = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n\nx_batch = x_train[:3]\nt_batch = t_train[:3]\n\ngrad_numerical = network.numerical_gradient(x_batch, t_batch)\ngrad_backprop = network.gradient(x_batch, t_batch)\n\n# 각 가중치의 절대 오차의 평균을 구한다.\nfor key in grad_numerical.keys():\n    diff = np.average( np.abs(grad_backprop[key] - grad_numerical[key]) )\n    print(key + \":\" + str(diff))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nW1:3.47852639937687e-10\nb1:1.8385319777367015e-09\nW2:4.1832720151728615e-09\nb2:1.4076945887425696e-07\n```\n:::\n:::\n\n\n## STEP3: Implementing Backpropagation to ANN\n\n기울기를 수치미분으로 구하는 방법이 아닌 해석적 방법의 연쇄법칙을 사용한 오차역전파를 사용하여 신경망학습을 구현해 보겠습니다. \n\n::: {#76867be0 .cell execution_count=3}\n``` {.python .cell-code}\n# coding: utf-8\nimport sys, os\nsys.path.append(os.pardir)\n\nimport numpy as np\nfrom dataset.mnist import load_mnist\n# from two_layer_net import TwoLayerNet\n\n# 데이터 읽기\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n\nnetwork = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n\niters_num = 10000\ntrain_size = x_train.shape[0]\nbatch_size = 100\nlearning_rate = 0.1\n\ntrain_loss_list = []\ntrain_acc_list = []\ntest_acc_list = []\n\niter_per_epoch = max(train_size / batch_size, 1)\n\nfor i in range(iters_num):\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n    \n    # 기울기 계산 # <1>\n    #grad = network.numerical_gradient(x_batch, t_batch) # 수치 미분 방식\n    grad = network.gradient(x_batch, t_batch) # 오차역전파법 방식(훨씬 빠르다)\n    \n    # 갱신\n    for key in ('W1', 'b1', 'W2', 'b2'):\n        network.params[key] -= learning_rate * grad[key]\n    \n    loss = network.loss(x_batch, t_batch)\n    train_loss_list.append(loss)\n    \n    if i % iter_per_epoch == 0:\n        train_acc = network.accuracy(x_train, t_train)\n        test_acc = network.accuracy(x_test, t_test)\n        train_acc_list.append(train_acc)\n        test_acc_list.append(test_acc)\n        print(train_acc, test_acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.07156666666666667 0.0736\n0.9053166666666667 0.9094\n0.9242166666666667 0.9278\n0.9360666666666667 0.9354\n0.9441333333333334 0.9452\n0.9507833333333333 0.9485\n0.9562666666666667 0.9526\n0.9608 0.9562\n0.9621333333333333 0.9586\n0.9656833333333333 0.9607\n0.9684166666666667 0.9614\n0.9705833333333334 0.9649\n0.97095 0.9638\n0.97465 0.9667\n0.9767166666666667 0.9683\n0.9766333333333334 0.9695\n0.9792166666666666 0.9699\n```\n:::\n:::\n\n\n1. 수치미분방법과 해석적방법의 기울기 계산\n\n",
    "supporting": [
      "ANN-lab_Backpro_files"
    ],
    "filters": [],
    "includes": {}
  }
}