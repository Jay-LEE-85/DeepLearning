{
  "hash": "69c7c0015bf4e3cebd9952eceeb55a80",
  "result": {
    "engine": "jupyter",
    "markdown": "# Overfitting\n\n---\n\n딥러닝 등 기계학습에서는 **오버피팅**을 항상조심해야 합니다. 훈련 또는 학습에 사용한 데이터에 지나치게 적응되어 다른 문제를 해결할 수 없는 상황을 회피하기 위해서죠.\n\n## Understanding overfitting\n\n오버피팅의 문제를 해결하기 위해서는 어떠한 상황에서 오버피팅이 발생하는지에 대한 이해가 필요합니다.\n\n-   매개변수가 많고 표현력이 높은 모델\n-   훈련 데이터가 적은 경우\n\n위의 상황을 살펴보기 위해 7층의 신경망을 사용하여 네트워크의 복잡성을 지나치게 높이고, 60,000개인 MNIST 데이터셋의 훈련데이터 중 아주 적은 300개만 사용한다면 오버피팅이 발생할까요?\n\nMNIST 데이터를 이용하여 훈련데이터와 시험데이터의 정확도를 아래 구현된 코드를 활용하여 비교해보도록 하겠습니다.\n\n::: {#0654ec8a .cell execution_count=1}\n``` {.python .cell-code}\n# coding: utf-8\nimport os\nimport sys\n\nsys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom dataset.mnist import load_mnist\nfrom common.multi_layer_net import MultiLayerNet\nfrom common.optimizer import SGD\n\n(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True)\n\n# 오버피팅을 재현하기 위해 학습 데이터 수를 줄임\nx_train = x_train[:300]\nt_train = t_train[:300]\n\n# weight decay（가중치 감쇠） 설정 =======================\nweight_decay_lambda = 0 # weight decay를 사용하지 않을 경우\n# weight_decay_lambda = 0.1\n# ====================================================\n\nnetwork = MultiLayerNet(input_size=784, hidden_size_list=[100, 100, 100, 100, 100, 100], output_size=10,\n                        weight_decay_lambda=weight_decay_lambda)\noptimizer = SGD(lr=0.01) # 학습률이 0.01인 SGD로 매개변수 갱신\n\nmax_epochs = 201\ntrain_size = x_train.shape[0]\nbatch_size = 100\n\ntrain_loss_list = []\ntrain_acc_list = []\ntest_acc_list = []\n\niter_per_epoch = max(train_size / batch_size, 1)\nepoch_cnt = 0\n\nfor i in range(1000000000):\n    batch_mask = np.random.choice(train_size, batch_size)\n    x_batch = x_train[batch_mask]\n    t_batch = t_train[batch_mask]\n\n    grads = network.gradient(x_batch, t_batch)\n    optimizer.update(network.params, grads)\n\n    if i % iter_per_epoch == 0:\n        train_acc = network.accuracy(x_train, t_train)\n        test_acc = network.accuracy(x_test, t_test)\n        train_acc_list.append(train_acc)\n        test_acc_list.append(test_acc)\n\n        print(\"epoch:\" + str(epoch_cnt) + \", train acc:\" + str(train_acc) + \", test acc:\" + str(test_acc))\n\n        epoch_cnt += 1\n        if epoch_cnt >= max_epochs:\n            break\n\n\n# 그래프 그리기==========\nmarkers = {'train': 'o', 'test': 's'}\nx = np.arange(max_epochs)\nplt.plot(x, train_acc_list, marker='o', label='train', markevery=10)\nplt.plot(x, test_acc_list, marker='s', label='test', markevery=10)\nplt.xlabel(\"epochs\")\nplt.ylabel(\"accuracy\")\nplt.ylim(0, 1.0)\nplt.legend(loc='lower right')\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepoch:0, train acc:0.09666666666666666, test acc:0.0996\nepoch:1, train acc:0.09666666666666666, test acc:0.1058\nepoch:2, train acc:0.12333333333333334, test acc:0.1191\nepoch:3, train acc:0.15333333333333332, test acc:0.135\nepoch:4, train acc:0.18333333333333332, test acc:0.1543\nepoch:5, train acc:0.22333333333333333, test acc:0.1747\nepoch:6, train acc:0.24333333333333335, test acc:0.1976\nepoch:7, train acc:0.2833333333333333, test acc:0.217\nepoch:8, train acc:0.30333333333333334, test acc:0.2347\nepoch:9, train acc:0.31333333333333335, test acc:0.2562\nepoch:10, train acc:0.35, test acc:0.2783\nepoch:11, train acc:0.36333333333333334, test acc:0.2909\nepoch:12, train acc:0.37333333333333335, test acc:0.3024\nepoch:13, train acc:0.4, test acc:0.3145\nepoch:14, train acc:0.42, test acc:0.3276\nepoch:15, train acc:0.42, test acc:0.3285\nepoch:16, train acc:0.4266666666666667, test acc:0.3429\nepoch:17, train acc:0.42333333333333334, test acc:0.3463\nepoch:18, train acc:0.43, test acc:0.3458\nepoch:19, train acc:0.42333333333333334, test acc:0.3477\nepoch:20, train acc:0.4666666666666667, test acc:0.359\nepoch:21, train acc:0.4766666666666667, test acc:0.3611\nepoch:22, train acc:0.48333333333333334, test acc:0.3714\nepoch:23, train acc:0.51, test acc:0.3754\nepoch:24, train acc:0.5133333333333333, test acc:0.389\nepoch:25, train acc:0.5266666666666666, test acc:0.4057\nepoch:26, train acc:0.53, test acc:0.4065\nepoch:27, train acc:0.5533333333333333, test acc:0.4319\nepoch:28, train acc:0.55, test acc:0.4356\nepoch:29, train acc:0.5833333333333334, test acc:0.4479\nepoch:30, train acc:0.5833333333333334, test acc:0.457\nepoch:31, train acc:0.5966666666666667, test acc:0.4692\nepoch:32, train acc:0.6333333333333333, test acc:0.5025\nepoch:33, train acc:0.65, test acc:0.5144\nepoch:34, train acc:0.6566666666666666, test acc:0.5318\nepoch:35, train acc:0.6933333333333334, test acc:0.5505\nepoch:36, train acc:0.7166666666666667, test acc:0.565\nepoch:37, train acc:0.71, test acc:0.5688\nepoch:38, train acc:0.73, test acc:0.5835\nepoch:39, train acc:0.77, test acc:0.5936\nepoch:40, train acc:0.7533333333333333, test acc:0.5939\nepoch:41, train acc:0.7733333333333333, test acc:0.6102\nepoch:42, train acc:0.76, test acc:0.5979\nepoch:43, train acc:0.8033333333333333, test acc:0.6116\nepoch:44, train acc:0.8066666666666666, test acc:0.6297\nepoch:45, train acc:0.81, test acc:0.6284\nepoch:46, train acc:0.8266666666666667, test acc:0.645\nepoch:47, train acc:0.8166666666666667, test acc:0.6354\nepoch:48, train acc:0.8266666666666667, test acc:0.6456\nepoch:49, train acc:0.8433333333333334, test acc:0.6644\nepoch:50, train acc:0.84, test acc:0.6573\nepoch:51, train acc:0.8366666666666667, test acc:0.6521\nepoch:52, train acc:0.8433333333333334, test acc:0.6497\nepoch:53, train acc:0.8566666666666667, test acc:0.6672\nepoch:54, train acc:0.86, test acc:0.6823\nepoch:55, train acc:0.86, test acc:0.6605\nepoch:56, train acc:0.86, test acc:0.6772\nepoch:57, train acc:0.8466666666666667, test acc:0.6817\nepoch:58, train acc:0.8766666666666667, test acc:0.6826\nepoch:59, train acc:0.8666666666666667, test acc:0.6758\nepoch:60, train acc:0.8766666666666667, test acc:0.6957\nepoch:61, train acc:0.8766666666666667, test acc:0.6978\nepoch:62, train acc:0.8833333333333333, test acc:0.6969\nepoch:63, train acc:0.8833333333333333, test acc:0.6958\nepoch:64, train acc:0.8933333333333333, test acc:0.7007\nepoch:65, train acc:0.89, test acc:0.7053\nepoch:66, train acc:0.89, test acc:0.707\nepoch:67, train acc:0.9033333333333333, test acc:0.7037\nepoch:68, train acc:0.8966666666666666, test acc:0.7156\nepoch:69, train acc:0.92, test acc:0.7296\nepoch:70, train acc:0.9133333333333333, test acc:0.724\nepoch:71, train acc:0.9266666666666666, test acc:0.7261\nepoch:72, train acc:0.9166666666666666, test acc:0.729\nepoch:73, train acc:0.92, test acc:0.7291\nepoch:74, train acc:0.91, test acc:0.7191\nepoch:75, train acc:0.92, test acc:0.7333\nepoch:76, train acc:0.93, test acc:0.7367\nepoch:77, train acc:0.93, test acc:0.7387\nepoch:78, train acc:0.94, test acc:0.7383\nepoch:79, train acc:0.9333333333333333, test acc:0.7349\nepoch:80, train acc:0.94, test acc:0.7408\nepoch:81, train acc:0.9366666666666666, test acc:0.7438\nepoch:82, train acc:0.9433333333333334, test acc:0.7472\nepoch:83, train acc:0.9466666666666667, test acc:0.7417\nepoch:84, train acc:0.9533333333333334, test acc:0.7527\nepoch:85, train acc:0.9466666666666667, test acc:0.7467\nepoch:86, train acc:0.9566666666666667, test acc:0.7471\nepoch:87, train acc:0.9566666666666667, test acc:0.7494\nepoch:88, train acc:0.9566666666666667, test acc:0.7501\nepoch:89, train acc:0.9533333333333334, test acc:0.7518\nepoch:90, train acc:0.95, test acc:0.7337\nepoch:91, train acc:0.96, test acc:0.7512\nepoch:92, train acc:0.96, test acc:0.7472\nepoch:93, train acc:0.97, test acc:0.7526\nepoch:94, train acc:0.9666666666666667, test acc:0.7497\nepoch:95, train acc:0.9666666666666667, test acc:0.7561\nepoch:96, train acc:0.9633333333333334, test acc:0.7559\nepoch:97, train acc:0.97, test acc:0.749\nepoch:98, train acc:0.9733333333333334, test acc:0.7538\nepoch:99, train acc:0.9733333333333334, test acc:0.758\nepoch:100, train acc:0.9733333333333334, test acc:0.7581\nepoch:101, train acc:0.9733333333333334, test acc:0.7544\nepoch:102, train acc:0.9733333333333334, test acc:0.7593\nepoch:103, train acc:0.9733333333333334, test acc:0.7595\nepoch:104, train acc:0.98, test acc:0.7619\nepoch:105, train acc:0.9766666666666667, test acc:0.7605\nepoch:106, train acc:0.98, test acc:0.7604\nepoch:107, train acc:0.98, test acc:0.7603\nepoch:108, train acc:0.9766666666666667, test acc:0.7659\nepoch:109, train acc:0.9733333333333334, test acc:0.767\nepoch:110, train acc:0.98, test acc:0.7611\nepoch:111, train acc:0.98, test acc:0.7617\nepoch:112, train acc:0.98, test acc:0.7621\nepoch:113, train acc:0.98, test acc:0.7655\nepoch:114, train acc:0.98, test acc:0.7602\nepoch:115, train acc:0.9833333333333333, test acc:0.7676\nepoch:116, train acc:0.9833333333333333, test acc:0.7666\nepoch:117, train acc:0.9833333333333333, test acc:0.7671\nepoch:118, train acc:0.9866666666666667, test acc:0.7681\nepoch:119, train acc:0.9833333333333333, test acc:0.7572\nepoch:120, train acc:0.9866666666666667, test acc:0.7648\nepoch:121, train acc:0.9866666666666667, test acc:0.7659\nepoch:122, train acc:0.9866666666666667, test acc:0.7648\nepoch:123, train acc:0.9833333333333333, test acc:0.7646\nepoch:124, train acc:0.9866666666666667, test acc:0.7645\nepoch:125, train acc:0.9833333333333333, test acc:0.7694\nepoch:126, train acc:0.9866666666666667, test acc:0.766\nepoch:127, train acc:0.9866666666666667, test acc:0.7678\nepoch:128, train acc:0.9866666666666667, test acc:0.7679\nepoch:129, train acc:0.9866666666666667, test acc:0.766\nepoch:130, train acc:0.99, test acc:0.7691\nepoch:131, train acc:0.9933333333333333, test acc:0.7666\nepoch:132, train acc:0.9933333333333333, test acc:0.7671\nepoch:133, train acc:0.99, test acc:0.7705\nepoch:134, train acc:0.9933333333333333, test acc:0.7667\nepoch:135, train acc:0.9933333333333333, test acc:0.7699\nepoch:136, train acc:0.9933333333333333, test acc:0.7712\nepoch:137, train acc:0.9933333333333333, test acc:0.7706\nepoch:138, train acc:0.9966666666666667, test acc:0.7715\nepoch:139, train acc:0.9966666666666667, test acc:0.772\nepoch:140, train acc:0.9933333333333333, test acc:0.7717\nepoch:141, train acc:0.9933333333333333, test acc:0.7731\nepoch:142, train acc:0.9966666666666667, test acc:0.7722\nepoch:143, train acc:0.9966666666666667, test acc:0.7672\nepoch:144, train acc:0.9966666666666667, test acc:0.7656\nepoch:145, train acc:0.9933333333333333, test acc:0.7733\nepoch:146, train acc:0.9966666666666667, test acc:0.7684\nepoch:147, train acc:0.9966666666666667, test acc:0.7724\nepoch:148, train acc:0.9966666666666667, test acc:0.7742\nepoch:149, train acc:0.9966666666666667, test acc:0.7723\nepoch:150, train acc:0.9966666666666667, test acc:0.7711\nepoch:151, train acc:0.9966666666666667, test acc:0.7711\nepoch:152, train acc:0.9966666666666667, test acc:0.7756\nepoch:153, train acc:0.9966666666666667, test acc:0.7723\nepoch:154, train acc:0.9966666666666667, test acc:0.7731\nepoch:155, train acc:0.9966666666666667, test acc:0.7728\nepoch:156, train acc:0.9966666666666667, test acc:0.7727\nepoch:157, train acc:1.0, test acc:0.7717\nepoch:158, train acc:1.0, test acc:0.771\nepoch:159, train acc:1.0, test acc:0.7705\nepoch:160, train acc:1.0, test acc:0.775\nepoch:161, train acc:1.0, test acc:0.771\nepoch:162, train acc:1.0, test acc:0.7726\nepoch:163, train acc:1.0, test acc:0.7707\nepoch:164, train acc:1.0, test acc:0.7681\nepoch:165, train acc:1.0, test acc:0.7713\nepoch:166, train acc:1.0, test acc:0.7729\nepoch:167, train acc:1.0, test acc:0.7721\nepoch:168, train acc:1.0, test acc:0.7725\nepoch:169, train acc:1.0, test acc:0.7708\nepoch:170, train acc:1.0, test acc:0.7753\nepoch:171, train acc:1.0, test acc:0.7724\nepoch:172, train acc:1.0, test acc:0.7715\nepoch:173, train acc:1.0, test acc:0.7715\nepoch:174, train acc:1.0, test acc:0.7743\nepoch:175, train acc:1.0, test acc:0.7764\nepoch:176, train acc:1.0, test acc:0.7733\nepoch:177, train acc:1.0, test acc:0.774\nepoch:178, train acc:1.0, test acc:0.7742\nepoch:179, train acc:1.0, test acc:0.7747\nepoch:180, train acc:1.0, test acc:0.7728\nepoch:181, train acc:1.0, test acc:0.7746\nepoch:182, train acc:1.0, test acc:0.7719\nepoch:183, train acc:1.0, test acc:0.7752\nepoch:184, train acc:1.0, test acc:0.7748\nepoch:185, train acc:1.0, test acc:0.7746\nepoch:186, train acc:1.0, test acc:0.7767\nepoch:187, train acc:1.0, test acc:0.7754\nepoch:188, train acc:1.0, test acc:0.7746\nepoch:189, train acc:1.0, test acc:0.7756\nepoch:190, train acc:1.0, test acc:0.774\nepoch:191, train acc:1.0, test acc:0.7757\nepoch:192, train acc:1.0, test acc:0.7755\nepoch:193, train acc:1.0, test acc:0.7753\nepoch:194, train acc:1.0, test acc:0.7761\nepoch:195, train acc:1.0, test acc:0.7758\nepoch:196, train acc:1.0, test acc:0.7765\nepoch:197, train acc:1.0, test acc:0.7763\nepoch:198, train acc:1.0, test acc:0.7773\nepoch:199, train acc:1.0, test acc:0.7785\nepoch:200, train acc:1.0, test acc:0.7755\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](TECH-overfitting_files/figure-html/cell-2-output-2.png){width=589 height=434}\n:::\n:::\n\n\n훈련 데이터를 사용한 정확도는 epoch가 100을 지날 무렴 정확도는 100%에 근접함에 반하여 시험 데이터를 사용한 정확도는 60%~70% 수준에 머무르는 것을 확인할 수 있습니다.\n\n이는 결국 훈련 데이터에만 지나치게 적용(fitting)하여 시험 데이터 등에 대한 범용성을 확보하지 못하였음을 즉, 오버피팅이 발생하였음을 보여줍니다.\n\n## Weight decay\n\n첫번째로 살펴볼 오버피팅을 억제하는 수단으로는 **가중치 감소**(weight decay, $\\lambda$)가 있습니다. 이는 학습과정 에서 가장 큰 가중치에 대해서는 그에 상응하는 큰 패널티를 부과하는 방법입니다.^[$L(\\textbf{w})+\\frac{1}{2}\\lambda\\textbf{W}^2$]\n\n\n페널티는 어떻게 산출해야 할까요? 순전파시에 손실함수 값에 $\\frac{1}{2}\\lambda\\textbf{W}^2$를 더하여 역전파시 가중치 업데이트 과정에서 그 마분값인 $\\lambda\\textbf{W}$를 더하게 되어 가중치가 큰 곳에 더 큰 패널티가 산출됩니다.\n\n정규화의 강도를 조절, 즉, 강중치 감소 정도는 하이퍼파라미터인 $\\lambda$로 조절합니다.\n\n$$\n\\begin{align}\n\\textbf{L}^* &= \\textbf{L}(\\textbf{W})+\\frac{1}{2}\\lambda\\textbf{W}^2 \\\\ \\\\\n\\textbf{W} &= \\textbf{W} - \\eta\\frac{\\partial{\\textbf{L}^*}}{\\partial{\\textbf{W}}} \\\\\n&= \\textbf{W} - \\eta\\frac{\\partial{(\\textbf{L}+\\frac{1}{2}\\lambda\\textbf{W}^2)}}{\\partial{\\textbf{W}}} \\\\\n&= \\textbf{W} - \\eta(\\frac{\\partial{\\textbf{L}}}{\\partial{\\textbf{W}}}+\\frac{\\partial\\frac{1}{2}\\lambda\\textbf{W}^2}{\\partial{\\textbf{W}}}) \\\\\n&= \\textbf{W} - \\eta(\\frac{\\partial{\\textbf{L}}}{\\partial{\\textbf{W}}}+\\lambda\\textbf{W})\n\\end{align}\n$$\n\n::: {.callout-note}\n## L2 Norm을 손실함수 값에 더한다? 그런데 왜 $\\sqrt{w_1^2+w_2^2+\\cdots+w_i^2}$이지?\n\n-   L2 Norm은 $\\sqrt{w_1^2+w_2^2+\\cdots+w_i^2}$ 꼴로 나타나느데 왜 딥러닝의 가중치감소에서는 손실함수에 더하는 L2 Norm을 $\\frac{1}{2}\\lambda\\textbf{W}^2$으로 정의되었을까요?\n-   먼저 $\\frac{1}{2}$항을 살펴보면 이는 수학적 편의를 위한 트릭에 해당합니다. 더해진 값을 역전파시 미분해야 하는데 $\\lambda|\\textbf{W}|_2^2$을 미분하는 것보다 $\\frac{1}{2}\\lambda|\\textbf{W}|_2^2$을 미분하여  $\\lambda\\textbf{W}$가 되면 보다 식을 단순하게 만들 수 있기 때문입니다.\n-   L2 Norm의 제곱은 어디로 갔을까요? 이는 최적화 과정에서 모델 가중치  $\\textbf{W}$를 업데이트할때 제곱근 연산이 필요없기 때문에 불필요한 내용을 생락한 것입니다.\n:::\n\n지금까지 살펴 본 내용을 바탕으로 가중치 감소에 따른 효과를 살펴 보도록 하겠습니다. 하이퍼파라미터인 $\\lambda$는 0.1로 설정하여 가중치 감소를 적용하였습니다.\n\n::: {#eef193bd .cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\nepoch:0, train acc:0.08666666666666667, test acc:0.0961\nepoch:1, train acc:0.10333333333333333, test acc:0.1003\nepoch:2, train acc:0.13333333333333333, test acc:0.1108\nepoch:3, train acc:0.17, test acc:0.1197\nepoch:4, train acc:0.18, test acc:0.1335\nepoch:5, train acc:0.20666666666666667, test acc:0.151\nepoch:6, train acc:0.24, test acc:0.177\nepoch:7, train acc:0.26666666666666666, test acc:0.205\nepoch:8, train acc:0.30333333333333334, test acc:0.2245\nepoch:9, train acc:0.36666666666666664, test acc:0.2493\nepoch:10, train acc:0.39666666666666667, test acc:0.2678\nepoch:11, train acc:0.4033333333333333, test acc:0.2826\nepoch:12, train acc:0.39, test acc:0.2921\nepoch:13, train acc:0.41333333333333333, test acc:0.3046\nepoch:14, train acc:0.4166666666666667, test acc:0.3064\nepoch:15, train acc:0.4166666666666667, test acc:0.3028\nepoch:16, train acc:0.42333333333333334, test acc:0.3156\nepoch:17, train acc:0.43, test acc:0.3227\nepoch:18, train acc:0.44, test acc:0.3321\nepoch:19, train acc:0.44666666666666666, test acc:0.3338\nepoch:20, train acc:0.4633333333333333, test acc:0.3394\nepoch:21, train acc:0.45, test acc:0.348\nepoch:22, train acc:0.45666666666666667, test acc:0.3539\nepoch:23, train acc:0.4533333333333333, test acc:0.3583\nepoch:24, train acc:0.4666666666666667, test acc:0.3583\nepoch:25, train acc:0.4766666666666667, test acc:0.3715\nepoch:26, train acc:0.4866666666666667, test acc:0.3797\nepoch:27, train acc:0.48, test acc:0.3816\nepoch:28, train acc:0.51, test acc:0.391\nepoch:29, train acc:0.52, test acc:0.4015\nepoch:30, train acc:0.53, test acc:0.4038\nepoch:31, train acc:0.5366666666666666, test acc:0.4144\nepoch:32, train acc:0.5366666666666666, test acc:0.4233\nepoch:33, train acc:0.5533333333333333, test acc:0.4337\nepoch:34, train acc:0.5533333333333333, test acc:0.4392\nepoch:35, train acc:0.5666666666666667, test acc:0.4502\nepoch:36, train acc:0.5866666666666667, test acc:0.4596\nepoch:37, train acc:0.59, test acc:0.4677\nepoch:38, train acc:0.6033333333333334, test acc:0.4761\nepoch:39, train acc:0.6, test acc:0.4759\nepoch:40, train acc:0.62, test acc:0.4921\nepoch:41, train acc:0.6266666666666667, test acc:0.4991\nepoch:42, train acc:0.65, test acc:0.5024\nepoch:43, train acc:0.6733333333333333, test acc:0.5162\nepoch:44, train acc:0.6633333333333333, test acc:0.5202\nepoch:45, train acc:0.68, test acc:0.5251\nepoch:46, train acc:0.6766666666666666, test acc:0.5353\nepoch:47, train acc:0.7, test acc:0.541\nepoch:48, train acc:0.7, test acc:0.5421\nepoch:49, train acc:0.71, test acc:0.5523\nepoch:50, train acc:0.7166666666666667, test acc:0.5561\nepoch:51, train acc:0.7166666666666667, test acc:0.5587\nepoch:52, train acc:0.7333333333333333, test acc:0.5633\nepoch:53, train acc:0.74, test acc:0.5736\nepoch:54, train acc:0.7533333333333333, test acc:0.5733\nepoch:55, train acc:0.7666666666666667, test acc:0.5853\nepoch:56, train acc:0.76, test acc:0.5832\nepoch:57, train acc:0.77, test acc:0.5867\nepoch:58, train acc:0.7633333333333333, test acc:0.5934\nepoch:59, train acc:0.7666666666666667, test acc:0.5941\nepoch:60, train acc:0.76, test acc:0.5974\nepoch:61, train acc:0.7933333333333333, test acc:0.6047\nepoch:62, train acc:0.8066666666666666, test acc:0.6099\nepoch:63, train acc:0.7966666666666666, test acc:0.6052\nepoch:64, train acc:0.8, test acc:0.6196\nepoch:65, train acc:0.8066666666666666, test acc:0.6169\nepoch:66, train acc:0.8066666666666666, test acc:0.6243\nepoch:67, train acc:0.81, test acc:0.625\nepoch:68, train acc:0.8233333333333334, test acc:0.6285\nepoch:69, train acc:0.8333333333333334, test acc:0.6318\nepoch:70, train acc:0.81, test acc:0.6328\nepoch:71, train acc:0.8066666666666666, test acc:0.6376\nepoch:72, train acc:0.8166666666666667, test acc:0.6353\nepoch:73, train acc:0.83, test acc:0.634\nepoch:74, train acc:0.8433333333333334, test acc:0.65\nepoch:75, train acc:0.8533333333333334, test acc:0.6514\nepoch:76, train acc:0.8333333333333334, test acc:0.6497\nepoch:77, train acc:0.83, test acc:0.6377\nepoch:78, train acc:0.8433333333333334, test acc:0.655\nepoch:79, train acc:0.8566666666666667, test acc:0.6553\nepoch:80, train acc:0.8266666666666667, test acc:0.6429\nepoch:81, train acc:0.8533333333333334, test acc:0.6569\nepoch:82, train acc:0.8466666666666667, test acc:0.6546\nepoch:83, train acc:0.86, test acc:0.6543\nepoch:84, train acc:0.8666666666666667, test acc:0.6703\nepoch:85, train acc:0.8633333333333333, test acc:0.671\nepoch:86, train acc:0.8733333333333333, test acc:0.6711\nepoch:87, train acc:0.8533333333333334, test acc:0.6679\nepoch:88, train acc:0.86, test acc:0.6722\nepoch:89, train acc:0.87, test acc:0.6765\nepoch:90, train acc:0.8633333333333333, test acc:0.6703\nepoch:91, train acc:0.8633333333333333, test acc:0.6812\nepoch:92, train acc:0.8666666666666667, test acc:0.6735\nepoch:93, train acc:0.8733333333333333, test acc:0.6861\nepoch:94, train acc:0.87, test acc:0.679\nepoch:95, train acc:0.86, test acc:0.6809\nepoch:96, train acc:0.86, test acc:0.6726\nepoch:97, train acc:0.8666666666666667, test acc:0.679\nepoch:98, train acc:0.87, test acc:0.6817\nepoch:99, train acc:0.8633333333333333, test acc:0.6855\nepoch:100, train acc:0.8733333333333333, test acc:0.6883\nepoch:101, train acc:0.8666666666666667, test acc:0.6814\nepoch:102, train acc:0.8866666666666667, test acc:0.6868\nepoch:103, train acc:0.8833333333333333, test acc:0.6907\nepoch:104, train acc:0.8766666666666667, test acc:0.6935\nepoch:105, train acc:0.8866666666666667, test acc:0.6896\nepoch:106, train acc:0.88, test acc:0.6937\nepoch:107, train acc:0.8766666666666667, test acc:0.6962\nepoch:108, train acc:0.87, test acc:0.6899\nepoch:109, train acc:0.8733333333333333, test acc:0.6935\nepoch:110, train acc:0.8666666666666667, test acc:0.6977\nepoch:111, train acc:0.87, test acc:0.6967\nepoch:112, train acc:0.8866666666666667, test acc:0.696\nepoch:113, train acc:0.88, test acc:0.6979\nepoch:114, train acc:0.8733333333333333, test acc:0.6932\nepoch:115, train acc:0.8666666666666667, test acc:0.694\nepoch:116, train acc:0.86, test acc:0.6944\nepoch:117, train acc:0.8733333333333333, test acc:0.6924\nepoch:118, train acc:0.8666666666666667, test acc:0.6909\nepoch:119, train acc:0.8733333333333333, test acc:0.7007\nepoch:120, train acc:0.8933333333333333, test acc:0.7033\nepoch:121, train acc:0.8866666666666667, test acc:0.7008\nepoch:122, train acc:0.9033333333333333, test acc:0.6984\nepoch:123, train acc:0.8966666666666666, test acc:0.6926\nepoch:124, train acc:0.9066666666666666, test acc:0.7053\nepoch:125, train acc:0.9, test acc:0.7047\nepoch:126, train acc:0.8933333333333333, test acc:0.706\nepoch:127, train acc:0.88, test acc:0.701\nepoch:128, train acc:0.8766666666666667, test acc:0.7034\nepoch:129, train acc:0.8866666666666667, test acc:0.7056\nepoch:130, train acc:0.88, test acc:0.7033\nepoch:131, train acc:0.89, test acc:0.708\nepoch:132, train acc:0.8933333333333333, test acc:0.7077\nepoch:133, train acc:0.9033333333333333, test acc:0.7015\nepoch:134, train acc:0.9166666666666666, test acc:0.7061\nepoch:135, train acc:0.8833333333333333, test acc:0.7069\nepoch:136, train acc:0.8933333333333333, test acc:0.7053\nepoch:137, train acc:0.89, test acc:0.7075\nepoch:138, train acc:0.88, test acc:0.7055\nepoch:139, train acc:0.88, test acc:0.6997\nepoch:140, train acc:0.8933333333333333, test acc:0.7002\nepoch:141, train acc:0.8966666666666666, test acc:0.7022\nepoch:142, train acc:0.88, test acc:0.7113\nepoch:143, train acc:0.92, test acc:0.7182\nepoch:144, train acc:0.8966666666666666, test acc:0.7101\nepoch:145, train acc:0.8933333333333333, test acc:0.708\nepoch:146, train acc:0.8833333333333333, test acc:0.7119\nepoch:147, train acc:0.91, test acc:0.715\nepoch:148, train acc:0.9133333333333333, test acc:0.719\nepoch:149, train acc:0.9, test acc:0.7186\nepoch:150, train acc:0.8966666666666666, test acc:0.706\nepoch:151, train acc:0.9133333333333333, test acc:0.7152\nepoch:152, train acc:0.8933333333333333, test acc:0.7151\nepoch:153, train acc:0.9133333333333333, test acc:0.7146\nepoch:154, train acc:0.9066666666666666, test acc:0.7126\nepoch:155, train acc:0.9033333333333333, test acc:0.7208\nepoch:156, train acc:0.9, test acc:0.7182\nepoch:157, train acc:0.9, test acc:0.7161\nepoch:158, train acc:0.8866666666666667, test acc:0.7188\nepoch:159, train acc:0.8833333333333333, test acc:0.717\nepoch:160, train acc:0.8866666666666667, test acc:0.7166\nepoch:161, train acc:0.8966666666666666, test acc:0.7165\nepoch:162, train acc:0.8966666666666666, test acc:0.7179\nepoch:163, train acc:0.8866666666666667, test acc:0.7211\nepoch:164, train acc:0.88, test acc:0.7095\nepoch:165, train acc:0.89, test acc:0.7161\nepoch:166, train acc:0.89, test acc:0.714\nepoch:167, train acc:0.8833333333333333, test acc:0.7166\nepoch:168, train acc:0.8933333333333333, test acc:0.7177\nepoch:169, train acc:0.8966666666666666, test acc:0.7162\nepoch:170, train acc:0.91, test acc:0.7157\nepoch:171, train acc:0.8933333333333333, test acc:0.7163\nepoch:172, train acc:0.9066666666666666, test acc:0.722\nepoch:173, train acc:0.8966666666666666, test acc:0.7144\nepoch:174, train acc:0.9166666666666666, test acc:0.7145\nepoch:175, train acc:0.9033333333333333, test acc:0.7185\nepoch:176, train acc:0.9, test acc:0.7205\nepoch:177, train acc:0.91, test acc:0.7183\nepoch:178, train acc:0.9266666666666666, test acc:0.7205\nepoch:179, train acc:0.8966666666666666, test acc:0.7211\nepoch:180, train acc:0.9133333333333333, test acc:0.7223\nepoch:181, train acc:0.9233333333333333, test acc:0.7233\nepoch:182, train acc:0.91, test acc:0.7185\nepoch:183, train acc:0.89, test acc:0.7181\nepoch:184, train acc:0.9033333333333333, test acc:0.7238\nepoch:185, train acc:0.9, test acc:0.7185\nepoch:186, train acc:0.89, test acc:0.7169\nepoch:187, train acc:0.8833333333333333, test acc:0.7154\nepoch:188, train acc:0.8933333333333333, test acc:0.7197\nepoch:189, train acc:0.9033333333333333, test acc:0.7215\nepoch:190, train acc:0.9, test acc:0.7252\nepoch:191, train acc:0.89, test acc:0.721\nepoch:192, train acc:0.92, test acc:0.7235\nepoch:193, train acc:0.9033333333333333, test acc:0.7205\nepoch:194, train acc:0.9133333333333333, test acc:0.7175\nepoch:195, train acc:0.9066666666666666, test acc:0.7218\nepoch:196, train acc:0.9033333333333333, test acc:0.7191\nepoch:197, train acc:0.9033333333333333, test acc:0.7248\nepoch:198, train acc:0.89, test acc:0.7208\nepoch:199, train acc:0.8966666666666666, test acc:0.7199\nepoch:200, train acc:0.9, test acc:0.7196\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](TECH-overfitting_files/figure-html/cell-3-output-2.png){width=589 height=434}\n:::\n:::\n\n\n여전히 오버피팅이 발생하고 있지만 이전과 비교하여 상당부분 훈련 데이터와 시험 데이터간 정확도의 차이가 줄어든 것을 확인할 수 있습니다. 즉, 오버피팅이 억제된 효과를 확인할 수 있습니다.\n\n## Dropout\n\n오버피팅을 억제하기 위하여 가중치 감소를 사용하였습니다. 구현도 쉽고 효과도 어느정도 확인하였습니다. 그러나 신경망의 모델이 복잡해지면 가중치 감소만으로는 적절한 대으이 어려울 수 있습니다.\n\n이러한 문제를 해결하고자 고안된 기법이 바로 **드롭아웃**입니다. 드롭우웃은 신경망의 각층의 노드를 훈련과정에서 임의로 삭제하면서 신호전달을 차단하는 방법입니다. 다만, 시험 또는 시험과정에서는 모든 노드를 사용합니다.^[주의 할 것은 시험 과정에서 각 노드 또는 뉴런의 출력에 훈련때 삭제 안한 비율을 곱하여 출력을 수행합니다.]\n\n![Concept of Dropout](image/fig-techOver1.png){#fig-techOver1}\n\n위에서 설명한 드롭아웃을 구현하도록 하겠습니다. 먼저 순전파를 담당하는 `forward`메서드에서는 훈련 때(`train_flg=True`)만 잘 계산해두면 시험 때 단순히 데이터를 흘리기만 하면됩니다.^[삭제 안한 비율은 곱하지 않아도 됩니다.]\n\n::: {#586509ae .cell execution_count=3}\n``` {.python .cell-code}\nclass Dropout:\n  def __init__(self, dropout_ratio=0.5):\n    self.dropout_ratio = dropout_ratio\n    self.mask = None\n\n  def forward(self, x, train_flg=True):\n    if train_flg:\n      self.mask = np.random.rand(*x.shape) > self.dropout_ratio # <1>\n      return x * self.mask\n    else:\n      return x * (1.0 - self.dropout_ratio)\n\n  def backward(self, dout):\n    return dout * self.mask # <2>\n```\n:::\n\n\n1. `self.mask`에 삭제할 뉴런을 `False`로 표시\n2. `backward`sms ReLU와 동작원리가 같음\n\n위의 구현코드를 가지고 실험한 7층의 신경망의 학습결과입니다.\n\n![Comparison of results(without Dropout(Left), with Dropout(Right))](image/fig-techOver2.png){#fig-techOver2}\n\n드롭아웃을 적용한 경우 훈련 데이터와 시험 데이터간 정확도의 차이가 확연하게 줄어 들었음을 확인할 수 있습니다. 동시에 표현력도 상당히 개선되었음을 확인할 수 있습니다.\n\n::: {.callout-note}\n## Dropout과 앙상블 학습\n\n-   기계학습에서 앙상블 학습(ensemble learning)은 개별적으로 학습시킨 여러 모델의 출력을 평균내어 추론하는 방식입니다.\n-   드롭아웃은 무작위로 노드 또는 뉴련을 삭제함으로써 각기 다른 신경망을 학습시킨후 평균을 내어 답하는 것과 비슷합니다.\n:::\n\n",
    "supporting": [
      "TECH-overfitting_files"
    ],
    "filters": [],
    "includes": {}
  }
}