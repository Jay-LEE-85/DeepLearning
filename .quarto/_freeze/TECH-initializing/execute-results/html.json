{
  "hash": "d9eaa092f7b7d9b37bfbda2b236f0b8a",
  "result": {
    "engine": "jupyter",
    "markdown": "# Initializing parameters\n\n---\n\n신경망의 주요 매개변수인 가중치의 초깃값을 어떻게 설정해야 할까요? 이는 학습의 성패를 가르기도 하는 매우 중요한 문제입니다. \n\n기본적으로 알아야 할것은 은닉층으로 연결되는 간선의 가중치는 작은 값(0을 의미하는 것이 아님에 주의)을 갖도록 하고, 무작위적으로 설정되어야 한다는 것입니다.\n\n## Weighting initialization when using Sigmoid functions\n**(Distribution of activation values in the hidden layer)**\n\n은닉층의 화성화값은 활성화 함수에서 출력되는 데이터를 말합니다. \n\n스탠퍼드 대학교의 **CS231n**의 수업에서 시그모이드 함수로 구현된 은닉층에 무작위로 생성한 입력데이터를 넣어 출력되는 데이터의 분포를 히스토그램으로 그려보았습니다.\n\n먼저 수업에 사용된 코드는 아래와 같습니다.\n\n::: {#7240f653 .cell execution_count=1}\n``` {.python .cell-code}\n# coding: utf-8\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef sigmoid(x):\n    return 1 / (1 + np.exp(-x))\n\ndef ReLU(x):\n    return np.maximum(0, x)\n\ndef tanh(x):\n    return np.tanh(x)\n    \ninput_data = np.random.randn(1000, 100)  # 1000개의 데이터\nnode_num = 100  # 각 은닉층의 노드(뉴런) 수\nhidden_layer_size = 5  # 은닉층이 5개\nactivations = {}  # 이곳에 활성화 결과를 저장\n\nx = input_data\n\nfor i in range(hidden_layer_size):\n    if i != 0:\n        x = activations[i-1]\n\n    # 초깃값을 다양하게 바꿔가며 실험해보자！\n    w = np.random.randn(node_num, node_num) * 1 # <1>\n    # w = np.random.randn(node_num, node_num) * 0.01\n    # w = np.random.randn(node_num, node_num) * np.sqrt(1.0 / node_num)\n    # w = np.random.randn(node_num, node_num) * np.sqrt(2.0 / node_num)\n\n    a = np.dot(x, w)\n\n    # 활성화 함수도 바꿔가며 실험해보자！\n    z = sigmoid(a) # <2>\n    # z = ReLU(a)\n    # z = tanh(a)\n\n    activations[i] = z\n\n# 히스토그램 그리기\nfor i, a in activations.items():\n    plt.subplot(1, len(activations), i+1)\n    plt.title(str(i+1) + \"-layer\")\n    if i != 0: plt.yticks([], [])\n    # plt.xlim(0.1, 1)\n    # plt.ylim(0, 7000)\n    plt.hist(a.flatten(), 30, range=(0,1))\nplt.show()\n```\n:::\n\n\n1. 가중치 초깃값 설정 코드\n2. 활성화 함수 설정 코드\n\n위 소스코드에서 가중치 초기화를 **표준편차가 1인 정규분포**, **표준편차가 0.01인 정규분포** 그리고 **Xavier**^[Xavier는 이전 노드의 갯수가 $n$개인 경우 표준편차가 $\\frac{1}{\\sqrt{n}}$인 분포를 사용하는 방식입니다.]의 방법을 사용하여 가중치의 활성화값 분포를 확인해보면 아래와 같습니다.\n\n::: {#fig-techInit0 layout-nrow=3}\n\n![Normmal Distribution with STD = 1](image/fig-techInit1.png){}\n\n![Normmal Distribution with STD = 0.01](image/fig-techInit2.png){}\n\n![Xavier](image/fig-techInit3.png){}\n\nDistribution of activation values by weight initialization methodology\n:::\n\n표준편차가 1인 정규분포를 이용한 가중치 초기화시에는 0과 1로 치우치는 모습이 보입니다. 이는 역전파시에 기울기 값을 점점 작아시게 하여 **기울기 소실**(8gradient vanising)의 문제를 야기합니다.\n\n표준편차가 0.01인 정규분포를 이용한 가중치 초기화시에는 0.5에 집중되는 모습이 보입니다. 노드별 값의 차이점이 없어 **표현력 제한**의 문제를 야기합니다.\n\nXavier의 방법은 모든 노드에 골고루 분포되어 기울기 소실 또는 표현력 제한의 이슈를 해결할 수 있는 것으로 보입니다. 현재 일반적으로 딥러닝의 표준으로 사용됩니다.\n\n::: {.callout-note}\n## 층이 깊어질 수록 분포가 고르지 않은 이유\n\n시그모이드 함수의 대칭저은 (x, y) = (0, 0.5)이다. 따라서, 층을 지나갈수록 활성화 값이 고르지 않게 나오는 것입니다. 이를 해결하기 위하여는 원점에 대하여 대칭인 tahn함수를 고려할 수 있습니다.\n:::\n\n## Weighting initialization when using ReLU functions\n\nReLU 함수는 앞서 살펴본 Sigmoid와 달리 비선형함수입니다. 따라서 가중치의 초깃값 설정 방법도 다르지 않을까요? 맞습니다. ReLU에 특회된 초깃값 설정 방법으로 **He 초깃값**이 존재합니다.\n\n이는 Xavier와 비슷하게 이전 노드의 갯수가 n개일 때, 표준편차가 ${\\sqrt\\frac{2}{n}}$인 정규 분포를 사용합니다. 이는 ReLU가 음의 영역이 0이라서 더 넓게 분포시키기 위해 2배의 계수가 필요하다고 해석할 수 있습니다.\n\n그럼 앞서 Sigmoid와 같이 **표준편차가 0.01인 정규분포**, **Xavier** 그리고 **He초깃값**의 방법을 사용하여 가중치의 활성화값 분포를 확인해보면 아래와 같습니다.\n\n![Distribution of activation values by weight initialization methodology](image/fig-techInit4.png){#fig-techInit4}\n\n표준편차가 0.01인 정규분포를 이용한 가중치 초기화시에는 각 층의 활성화값이 아주 작은값들이 나오게 되어 역전파시 학습이 거의 이루어지지 않는 문제를 갖고 있습니다.\n\nXavier의 방법은 층이 깊어 질수록 한쪽으로 치우짐이 커지고, 학습시 기울기 소실의 문제를 갖고 있습니다.\n\nHe 초깃값은 모든 층에서 활성화 값이 균일하가 분포되어 역전파시에 적절한 학습을 기대할 수 있습니다.\n\n::: {.callout-warning}\n## 활성화값의 분포\n\n-   초깃값의 설정은 활성화함수를 거쳐 나오는 출력값 즉, 활성화값의 분포를 결정합니다. 적절한 학습을 위해서는 활성화값이 균일하게 분포되고 기울기 소실 또는 표현력 문제를 야기하지 않아야 합니다.\n\n-   결과적으로 Sigmoid는 Xavier, ReLU는 He초깃값을 활용하여 가중치 초깃값을 설정할 경우 활성화값의 분포를 어느 한쪽에  치우침없이 균일하게 설정할 수 있습니다.\n:::\n\n",
    "supporting": [
      "TECH-initializing_files"
    ],
    "filters": [],
    "includes": {}
  }
}