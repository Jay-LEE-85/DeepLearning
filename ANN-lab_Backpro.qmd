# Lab: Implementing Backpropagation to ANN 
---

지금까지 살펴본 내용을 종합하여 계층들을 조합한 신경망을 구축해 보도록 하겠습니다.  구체적인 구현에 앞서 전체적인 이해를 위해 전체과정을 다시 살펴볼 필요가 있습니다.

-   **Pre requisite**
    + 신경망에는 적응 가능한 가중치와 편향이 있고, 이 가중치와 편향을 훈련 데이터에 적응하도록 조정하는 과정을 **학습**이라 한다.
-   **1단계 - 미니배치**
    + 훈련 데이터 중 일부를 무작위로 추출하고, 이러한 미니배치를 활용하여 미니배치의 손실함수 값을 줄이도록 하는 것을 목표로 한다.
-   **2단계 - 기울기 산출**
    + 미니배치의 손실함수 값을 줄이기 위해 각 가중치 매개변수의 기울기루 구하고, 기울기는 손실함수의 값을 가장작게하는 방향으로 제시한다.
-   **3단계 - 매개변수 갱신**
    + 가중치 매개변수를 기울기의 반대방향(책에는 기울기 방향으로 되어 있는데?)으로 아주 조금 갱신한다.
-   **4단계 - 반복(Iteration)**
    + 1~3단계를 반복합니다.

오차 역전파는 2단계인 기울기 산출에 해당하고 기울기는 수치미분을 활용함을 다시 떠올려보고, 이를 효율적으로 수행하기 위하여 미니배치를 활용한다는 것까지 생각하며 다음의 구현사례를 살펴보도록 합시다.

## STEP1: Two Layer Net

지금까지 학습한 내용을 바탕으로 기존 **Two Layer Net**을 새롭게 구현해 보겠습니다. 2층 신경망의 가중치 초기화 및 계층을 생성하도록 합니다.

이후 이 계층들을 활용하여 순전파^[순전파는 hidden layers를 대상으로 하는 `predict`와 output layer를 대상으로 하는 `loss` 메서드로 구분]를 우선 실행합니다. 이후 순전파시의 손실함수값을 받아 역전파를 진행합니다.

```{python}
import sys, os
sys.path.append(os.pardir)
import numpy as np

from common.layers import *
from common.gradient import numerical_gradient
from collections import OrderedDict

class TwoLayerNet:

  def __init__(self, input_size, hidden_size, output_size, weight_init_std = 0.01):
    # 가중치 초기화
    self.params = {}
    self.params['W1'] = weight_init_std * np.random.randn(input_size, hidden_size)
    self.params['b1'] = np.zeros(hidden_size)
    self.params['W2'] = weight_init_std * np.random.randn(hidden_size, output_size) 
    self.params['b2'] = np.zeros(output_size)
    # 계층 생성
    self.layers = OrderedDict() # <1>
    self.layers['Affine1'] = Affine(self.params['W1'], self.params['b1'])
    self.layers['Relu1'] = Relu()
    self.layers['Affine2'] = Affine(self.params['W2'], self.params['b2'])
    self.lastLayer = SoftmaxWithLoss()

  def predict(self, x):
    for layer in self.layers.values():
        x = layer.forward(x) # <2>
    return x

  # x :입력 데이터, t : 정답 레이블
  def loss(self, x, t):
    y = self.predict(x)
    return self.lastLayer.forward(y, t) # <2>

  def accuracy(self, x, t):
    y = self.predict(x)
    y = np.argmax(y, axis=1)
    if t.ndim != 1: t = np.argmax(t, axis=1)
    accuracy = np.sum(y == t) / float(x.shape[0])
    return accuracy

  # x :입력 데이터, t : 정답 레이블
  def numerical_gradient(self, x, t): # <3>
    loss_W = lambda W: self.loss(x, t)
    
    grads = {}
    grads['W1'] = numerical_gradient(loss_W, self.params['W1'])
    grads['b1'] = numerical_gradient(loss_W, self.params['b1'])
    grads['W2'] = numerical_gradient(loss_W, self.params['W2'])
    grads['b2'] = numerical_gradient(loss_W, self.params['b2'])
    return grads

  def gradient(self, x, t): # <3>
    # 순전파
    self.loss(x, t)

    # 역전파
    dout = 1
    dout = self.lastLayer.backward(dout) # <4>
    layers = list(self.layers.values())
    layers.reverse() # <5>
    for layer in layers:
      dout = layer.backward(dout) # <4>

    # 결과저장
    grads = {}
    grads['W1'] = self.layers['Affine1'].dW
    grads['b1'] = self.layers['Affine1'].db
    grads['W2'] = self.layers['Affine2'].dW
    grads['b2'] = self.layers['Affine2'].db

    return grads
```
1. `OrderedDict`의 경우 순서가 딕셔너리라 순전파 때 추가한 순서대로 연산
2. `forward`는 `Affine` 및 `Relu`클래스에 존재하는 순전파 메서드
3. `numerical_gradient`은 검증용 수치미분 메서드, `gradient`는 학습용 해석미분 메서드
4. `backward`는 `Affine` 및 `Relu`클래스에 존재하는 역전파 메서드
5. `reverse`로 `layers`의 순서를 뒤집어 연산이 역으로 진행되게 하는 메서드

## STEP2: Gradient Check

오차역전파 이전에 가중치 매개변수를 업데이트하기 위하여 기울기가 필요하다고 하였습니다. 이러한 기울기는 수치미분을 써서 구하는 방법과 핵석적으로 수식을 풀어 구하는 방법이 존재합을 확인하였습니다. 

후자의 경우가 매개변수가 많아도 효율적으로 계산할 수 있음을 확인한 만큼 오차역전파를 해석적인 방법을 활용하여 구현하겠습니다.^[수치미분은 구현이 쉬워 실수를 줄이고 정확한 값을 산출할 수 있습니다. 다만, 효율적이지 않은 문제가 있습니다. 따라서, 수치미분은 해석적 방법으로 구한 기울기의 값을 검증하기 위한 도구로 활용시 이점이 있습니다.]

```{python}
# coding: utf-8
import sys, os
sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정
import numpy as np
from dataset.mnist import load_mnist
# from two_layer_net import TwoLayerNet

# 데이터 읽기
(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)

network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)

x_batch = x_train[:3]
t_batch = t_train[:3]

grad_numerical = network.numerical_gradient(x_batch, t_batch)
grad_backprop = network.gradient(x_batch, t_batch)

# 각 가중치의 절대 오차의 평균을 구한다.
for key in grad_numerical.keys():
    diff = np.average( np.abs(grad_backprop[key] - grad_numerical[key]) )
    print(key + ":" + str(diff))
```

## STEP3: Implementing Backpropagation to ANN

기울기를 수치미분으로 구하는 방법이 아닌 해석적 방법의 연쇄법칙을 사용한 오차역전파를 사용하여 신경망학습을 구현해 보겠습니다. 

```{python}
# coding: utf-8
import sys, os
sys.path.append(os.pardir)

import numpy as np
from dataset.mnist import load_mnist
# from two_layer_net import TwoLayerNet

# 데이터 읽기
(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)

network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)

iters_num = 10000
train_size = x_train.shape[0]
batch_size = 100
learning_rate = 0.1

train_loss_list = []
train_acc_list = []
test_acc_list = []

iter_per_epoch = max(train_size / batch_size, 1)

for i in range(iters_num):
    batch_mask = np.random.choice(train_size, batch_size)
    x_batch = x_train[batch_mask]
    t_batch = t_train[batch_mask]
    
    # 기울기 계산 # <1>
    #grad = network.numerical_gradient(x_batch, t_batch) # 수치 미분 방식
    grad = network.gradient(x_batch, t_batch) # 오차역전파법 방식(훨씬 빠르다)
    
    # 갱신
    for key in ('W1', 'b1', 'W2', 'b2'):
        network.params[key] -= learning_rate * grad[key]
    
    loss = network.loss(x_batch, t_batch)
    train_loss_list.append(loss)
    
    if i % iter_per_epoch == 0:
        train_acc = network.accuracy(x_train, t_train)
        test_acc = network.accuracy(x_test, t_test)
        train_acc_list.append(train_acc)
        test_acc_list.append(test_acc)
        print(train_acc, test_acc)
```
1. 수치미분방법과 해석적방법의 기울기 계산